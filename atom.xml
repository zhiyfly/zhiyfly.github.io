<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhiyfly&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-10T06:23:21.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhiyfly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dash_source_analyses.md</title>
    <link href="http://yoursite.com/2016/09/10/dash-source-analyses-md/"/>
    <id>http://yoursite.com/2016/09/10/dash-source-analyses-md/</id>
    <published>2016-09-10T02:51:54.000Z</published>
    <updated>2016-09-10T06:23:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DYCI工具分析"><a href="#DYCI工具分析" class="headerlink" title="DYCI工具分析"></a>DYCI工具分析</h1><hr>
<p>DYCI由三部分功能模块组成，脚本+plugin+framework。<br><img src="./1472797245938.png" alt="Alt text"></p>
<p>脚本+plugin在执行install.sh时完成。<br>framework需要自己集成到app里面。</p>
<h3 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h3><ul>
<li>在安装阶段，clang compiler会被替换成clang-proxy compiler，并把真正的clang备份。</li>
<li>在程序第一次编译时，clang-proxy compiler会保存每个文件的编译参数。然后调用真正的clang编译程序。</li>
<li>程序运行起来之后。dyci library会监测~/.dyci目录的变化。</li>
<li>当你在xcode里面执行 “Recompile and inject” 时，dyci会使用之前编译时保存的编译参数，重新编译你选中的文件。编程成功后生成的.o会被包进一个dylib，并存入~/.dyci目录。</li>
<li>dyci library监测到~/.dyci目录变化，调用dlopen加载这个新的dylib。之后在进程中就会有两个class X的实例。dyci library会把原来的class X的方法实现替换成新的class X的方法实现。因此实现动态插入代码。</li>
</ul>
<h3 id="install-sh源码分析"><a href="#install-sh源码分析" class="headerlink" title="install.sh源码分析"></a>install.sh源码分析</h3><ul>
<li>用dyci-clang.py替换默认的clang，并且拷贝clangParams.py到默认clang所在目录下</li>
<li>创建~/.dyci，~/.dyci/index, ~/.dyci/scripts目录并设置读写权限。把dyci-recompile.py和clangParams.py拷贝到Scripts目录下。</li>
<li>安装appCode和xcode插件。</li>
</ul>
<h3 id="1、命令行参数和log函数"><a href="#1、命令行参数和log函数" class="headerlink" title="1、命令行参数和log函数"></a>1、命令行参数和log函数</h3><ul>
<li>命令行参数的支持<br><strong>-v</strong> : 日志开关，默认为0，传1打开开关。<br><strong>-s</strong> : 跳过clang proxy</li>
<li>log方法：打印日志的方法，通过_V控制。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># ============= Logging support ======================</div><div class="line">_V=0</div><div class="line">_SKIP_CLANG_PROXY=0</div><div class="line"></div><div class="line">while getopts &quot;vs&quot; OPTION</div><div class="line">do</div><div class="line">  case $OPTION in</div><div class="line">    v) _V=1</div><div class="line">       ;;</div><div class="line">    s) _SKIP_CLANG_PROXY=1</div><div class="line">       ;; </div><div class="line">  esac</div><div class="line">done</div><div class="line"></div><div class="line"></div><div class="line">function log () &#123;</div><div class="line">    if [[ $_V -eq 1 ]]; then</div><div class="line">        echo</div><div class="line">        echo &quot;$@&quot;</div><div class="line">    fi</div><div class="line">&#125;</div><div class="line"></div><div class="line"># ============= Logging support ends ======================</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><ul>
<li>获得命令行脚本所在的目录</li>
<li>进入该目录的上级目录</li>
<li>找到clang命令行工具的path和目录，创建一个全局变量给后面使用。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># determining from which directory script is executed</div><div class="line">DIR=&quot;$( cd -P &quot;$( dirname &quot;$0&quot; )&quot; &amp;&amp; pwd )&quot;</div><div class="line"># going to that directory</div><div class="line">cd &quot;$&#123;DIR&#125;&quot;</div><div class="line">cd ..</div><div class="line"></div><div class="line">CLANG_LOCATION=`xcrun -find clang`</div><div class="line">CLANG_USR_BIN=`dirname &quot;$&#123;CLANG_LOCATION&#125;&quot;`</div><div class="line">CLANG_BACKUP_LOCATION=$CLANG_LOCATION.backup</div><div class="line">CLANG_REAL_LOCATION=$CLANG_LOCATION-real</div><div class="line">CLANG_REAL_LOCATION_PP=&quot;$CLANG_LOCATION-real++&quot;</div><div class="line"></div><div class="line">echo</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h3><p>判断_SKIP_CLANG_PROXY的值是否为0，如果为0，进入备份clang。否则这整段代码跳过。_SKIP_CLANG_PROXY的默认值为0，除非在外部传参数时赋值</p>
<ul>
<li>判断是否存在CLANG_BACKUP_LOCATION文件，如果不存在，进入如果存在，表示dyci-clang已经存在了。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">if [[ $_SKIP_CLANG_PROXY -eq 0 ]]; then</div><div class="line">  echo -n &quot;== Backing up clang : &quot;</div><div class="line">  if [[ ! -f $&#123;CLANG_BACKUP_LOCATION&#125; ]]; then</div><div class="line">    # Checking, if it isn&apos;t our script laying in clang</div><div class="line">    echo grep -Fq &quot;== CLANG_PROXY ==&quot; &quot;$CLANG_LOCATION&quot;</div><div class="line">    if grep -Fq &quot;== CLANG_PROXY ==&quot; &quot;$CLANG_LOCATION&quot;  </div><div class="line">      then</div><div class="line">      # code if found</div><div class="line">      # This is bad....</div><div class="line">     echo &quot;Original clang compiler was already proxied via dyci and no backup can be found.&quot;</div><div class="line">     echo &quot;This can be because of Xcode update without dyci uninstallation.&quot;</div><div class="line">     echo &quot;In case, if you see this, clang is little broken now, and you need to update it manually.&quot;</div><div class="line">     echo &quot;By running next command in your terminal : &quot;</div><div class="line">     echo &quot;echo &quot;&quot;$&#123;CLANG_LOCATION&#125;&quot;&quot; &quot;&quot;$&#123;CLANG_BACKUP_LOCATION&#125;&quot;&quot; | xargs -n 1 cp /usr/bin/clang&quot;</div><div class="line">     exit 1</div><div class="line">    fi</div><div class="line">  # We should backup clang ONLY if it is an binary file only</div><div class="line">    log &quot; cp $&#123;CLANG_LOCATION&#125; $&#123;CLANG_BACKUP_LOCATION&#125;&quot;</div><div class="line">    sudo cp &quot;$&#123;CLANG_LOCATION&#125;&quot; &quot;$&#123;CLANG_BACKUP_LOCATION&#125;&quot;</div><div class="line">    log &quot;echo Backup is at : $&#123;CLANG_BACKUP_LOCATION&#125;&quot;</div><div class="line">    echo &quot;Done.&quot;</div><div class="line">  else</div><div class="line">    echo &quot;Skipped.&quot;</div><div class="line">    echo &quot;   Seems dyci-clang has already been installed&quot;</div><div class="line">    log &quot;Backup is at : $&#123;CLANG_BACKUP_LOCATION&#125;&quot;</div><div class="line">  fi</div><div class="line"></div><div class="line">  echo -n &quot;== Faking up clang : &quot;</div><div class="line"></div><div class="line">  log &quot;cp $&#123;CLANG_BACKUP_LOCATION&#125; $&#123;CLANG_REAL_LOCATION&#125;&quot;</div><div class="line">  sudo cp &quot;$&#123;CLANG_BACKUP_LOCATION&#125;&quot; &quot;$&#123;CLANG_REAL_LOCATION&#125;&quot;</div><div class="line"></div><div class="line">  log &quot; cp $&#123;CLANG_BACKUP_LOCATION&#125; $&#123;CLANG_REAL_LOCATION_PP&#125;&quot;</div><div class="line">  sudo cp &quot;$&#123;CLANG_BACKUP_LOCATION&#125;&quot; &quot;$&#123;CLANG_REAL_LOCATION_PP&#125;&quot;</div><div class="line"></div><div class="line">  #DYCI-CLANG RIGHTS</div><div class="line">  chmod +x Scripts/dyci-clang.py</div><div class="line">  chmod +x Scripts/dyci-recompile.py</div><div class="line"></div><div class="line">  log &quot;sudo cp Scripts/dyci-clang.py $&#123;CLANG_LOCATION&#125;&quot;</div><div class="line">  log &quot;sudo cp Scripts/clangParams.py $&#123;CLANG_USR_BIN&#125;&quot;</div><div class="line"></div><div class="line">  sudo cp Scripts/dyci-clang.py &quot;$&#123;CLANG_LOCATION&#125;&quot;</div><div class="line">  sudo cp Scripts/clangParams.py &quot;$&#123;CLANG_USR_BIN&#125;&quot;</div><div class="line"></div><div class="line">  echo &quot;Done.&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<h3 id="dyci-clang-py源码分析"><a href="#dyci-clang-py源码分析" class="headerlink" title="dyci-clang.py源码分析"></a>dyci-clang.py源码分析</h3><ul>
<li>在编译时xcode里调用clang时，会掉到该脚本的代码，原因在install里讲过了。</li>
<li>把clang的编译参数做下处理，得到classname等信息，根据className的md5值filename创建文件，文件保存在~/.dyci/index/目录下，把编译参数和当前工作目录保存到filename文件中。</li>
<li>调用clang-real编译源文件并输出信息、error。</li>
</ul>
<h3 id="clangParams-py分析"><a href="#clangParams-py分析" class="headerlink" title="clangParams.py分析"></a>clangParams.py分析</h3><ul>
<li>解析clang的编译参数，得到下面信息：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">return &#123;&apos;class&apos;:className,</div><div class="line">            &apos;object&apos;:objectCompilation,</div><div class="line">            &apos;arch&apos;:arch,</div><div class="line">            &apos;isysroot&apos;:isysroot,</div><div class="line">            &apos;LParams&apos;:Lparams,</div><div class="line">            &apos;FParams&apos;:Fparams,</div><div class="line">            &apos;minOSParam&apos;:minOSParam,</div><div class="line">            &apos;isAnalyzer&apos;:isAnalyzer</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="dyci-xcode-plugin-源码分析"><a href="#dyci-xcode-plugin-源码分析" class="headerlink" title="dyci-xcode-plugin 源码分析"></a>dyci-xcode-plugin 源码分析</h3><h5 id="SFDYCIPlugin"><a href="#SFDYCIPlugin" class="headerlink" title="SFDYCIPlugin"></a>SFDYCIPlugin</h5><ul>
<li>在xcode菜单里添加dyci 菜单入口，支持快捷键</li>
<li>初始化recompiler</li>
<li>调用recompiler重新编译</li>
</ul>
<h5 id="SFDYCICompositeRecompiler"><a href="#SFDYCICompositeRecompiler" class="headerlink" title="SFDYCICompositeRecompiler"></a>SFDYCICompositeRecompiler</h5><p>The recompiler that contains N other compilers，And uses fall-back strategy.<br>If this recompiler returns NO than no underlying recompilers were able to recompile specified file。</p>
<ul>
<li><h5 id="SFDYCIClangProxyRecompiler"><a href="#SFDYCIClangProxyRecompiler" class="headerlink" title="SFDYCIClangProxyRecompiler"></a>SFDYCIClangProxyRecompiler</h5><p>Dyci proxy recompiler that is using dyci-recpmpile.py python script</p>
</li>
<li></li>
</ul>
<h5 id="SFDYCIXcodeObjectiveCRecompiler"><a href="#SFDYCIXcodeObjectiveCRecompiler" class="headerlink" title="SFDYCIXcodeObjectiveCRecompiler"></a>SFDYCIXcodeObjectiveCRecompiler</h5><h3 id="dyci-recompile"><a href="#dyci-recompile" class="headerlink" title="dyci-recompile"></a>dyci-recompile</h3><hr>
<ul>
<li>取到要处理的文件名。如果是图片、xib、storyboard，copy到bundle目录。</li>
<li>如果是代码文件，拿到之前保存的编译参数，用原始clang编译这个文件生成.o文件。</li>
<li>再用原始clang link这个.o文件生成dylib，放在~/.dyci目录下</li>
</ul>
<h3 id="dyci-library源码分析"><a href="#dyci-library源码分析" class="headerlink" title="dyci library源码分析"></a>dyci library源码分析</h3><ul>
<li><p>SFDynamicCodeInjection</p>
<ul>
<li>+load方法里enable。</li>
<li>swizzling init 和 dealloc方法。</li>
<li>启动fileWatcher监控~/.dyci目录的变化。</li>
</ul>
</li>
<li><p>SFFileWatcher</p>
<ul>
<li>调用dispatch_source_set_event_handler观察~/.dyci目录文件的变化。当有变化时，检查目录下的文件的创建时间，通过对比上一次SFFileWatcher的load时间和文件的时间来判断文件是否做过修改。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// Resolving file descriptor</div><div class="line">   uintptr_t fd = (uintptr_t) open([filePath cStringUsingEncoding:NSUTF8StringEncoding], O_EVTONLY);</div><div class="line"></div><div class="line">   // Setting up queued and source of dispatch events</div><div class="line">   _queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">   _source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE,</div><div class="line">                                    (uintptr_t) fd,</div><div class="line">                                    DISPATCH_VNODE_WRITE,</div><div class="line">                                    _queue);</div><div class="line"></div><div class="line">   __block id weakSelf = self;</div><div class="line">   dispatch_source_set_event_handler(_source, ^&#123;</div><div class="line">      dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">         [weakSelf checkForFileCreationDate];</div><div class="line">      &#125;);</div><div class="line">   &#125;);</div><div class="line"></div><div class="line">   dispatch_source_set_cancel_handler(_source, ^&#123;</div><div class="line">      close(fd);</div><div class="line">   &#125;);</div><div class="line"></div><div class="line">   dispatch_resume(_source);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>SFDynamicCodeInjection里实现code injection<br>资源文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">if ([[filePath lastPathComponent] isEqualToString:@&quot;resource&quot;]) &#123;</div><div class="line"></div><div class="line">      NSLog(@&quot; &quot;);</div><div class="line">      NSLog(@&quot; ================================================= &quot;);</div><div class="line">      NSLog(@&quot;New resource was injected&quot;);</div><div class="line">      NSLog(@&quot;All classes will be notified with&quot;);</div><div class="line">      NSLog(@&quot; - (void)updateOnResourceInjection:(NSString *)path &quot;);</div><div class="line">      NSLog(@&quot; &quot;);</div><div class="line">      </div><div class="line">      NSString * injectedResourcePath =</div><div class="line">      [NSString stringWithContentsOfFile:filePath</div><div class="line">                                encoding:NSUTF8StringEncoding</div><div class="line">                                   error:nil];</div><div class="line"></div><div class="line">      // Flushing UIImage cache</div><div class="line">      [self flushUIImageCache];</div><div class="line"></div><div class="line">      if ([[injectedResourcePath pathExtension] isEqualToString:@&quot;strings&quot;]) &#123;</div><div class="line">         [self flushBundleCache:[NSBundle mainBundle]];</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      [[SFInjectionsNotificationsCenter sharedInstance] notifyOnResourceInjection:injectedResourcePath];</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>dylib的插入，先获得当前所有的class集合，然后调用dlopen加载dylib，然后再获得当前所有的class集合，然后拿到新旧class集合的差集<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">// If its library</div><div class="line">   // Sometimes... we got notification with temporary file</div><div class="line">   // dci12123.dylib.ld_1237sj</div><div class="line">   NSString * dciDynamicLibraryPath = filePath;</div><div class="line">   if (![[dciDynamicLibraryPath pathExtension] isEqualToString:@&quot;dylib&quot;]) &#123;</div><div class="line">      dciDynamicLibraryPath = [dciDynamicLibraryPath stringByDeletingPathExtension];</div><div class="line">   &#125;</div><div class="line">   if ([[dciDynamicLibraryPath pathExtension] isEqualToString:@&quot;dylib&quot;]) &#123;</div><div class="line">      NSLog(@&quot; &quot;);</div><div class="line">      NSLog(@&quot; ================================================= &quot;);</div><div class="line">      NSLog(@&quot;Found new DCI ... Loading&quot;);</div><div class="line">      </div><div class="line">      NSMutableSet * classesSet = [NSMutableSet currentClassesSet];</div><div class="line">      </div><div class="line">      void * libHandle = dlopen([dciDynamicLibraryPath cStringUsingEncoding:NSUTF8StringEncoding],</div><div class="line">                                RTLD_NOW | RTLD_GLOBAL);</div><div class="line">      char * err = dlerror();</div><div class="line">      </div><div class="line">      if (libHandle) &#123;</div><div class="line">         </div><div class="line">         NSLog(@&quot;DYCI was successfully loaded&quot;);</div><div class="line">         NSLog(@&quot;Searching classes to inject&quot;);</div><div class="line"></div><div class="line">         // Retrieving difference between old classes list and</div><div class="line">         // current classes list</div><div class="line">         NSMutableSet * currentClassesSet = [NSMutableSet currentClassesSet];</div><div class="line">         [currentClassesSet minusSet:classesSet];</div><div class="line"></div><div class="line">         [self performInjectionWithClassesInSet:currentClassesSet];</div><div class="line">         </div><div class="line">      &#125; else &#123;</div><div class="line"></div><div class="line">         NSLog(@&quot;Couldn&apos;t load file Error : %s&quot;, err);</div><div class="line"></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      NSLog(@&quot; &quot;);</div><div class="line"></div><div class="line">      dlclose(libHandle);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>performInjectionWithClassesInSet<br>遍历上一步差集中的每一个类，执行代码插入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> Injecting in all classes, that were found in specified set</div><div class="line"> */</div><div class="line">- (void)performInjectionWithClassesInSet:(NSMutableSet *)classesSet &#123;</div><div class="line"></div><div class="line">   for (NSValue * classWrapper in classesSet) &#123;</div><div class="line">      Class clz;</div><div class="line">      [classWrapper getValue:&amp;clz];</div><div class="line">      NSString * className = NSStringFromClass(clz);</div><div class="line"></div><div class="line">      if ([className hasPrefix:@&quot;__&quot;] &amp;&amp; [className hasSuffix:@&quot;__&quot;]) &#123;</div><div class="line">         // Skip some O_o classes</div><div class="line"></div><div class="line">      &#125; else &#123;</div><div class="line"></div><div class="line">         [self performInjectionWithClass:clz];</div><div class="line">         NSLog(@&quot;Class was successfully injected&quot;);</div><div class="line"></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据类的名字拿到旧的class对象，很有趣的是，即使我们加载了两个相同名字的类实例。我们也能根据NSClassFromString得到第一个实例。<br>然后用新的class实例的方法和meta类方法替换旧的class实例方法和meta类方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (void)performInjectionWithClass:(Class)injectedClass &#123;</div><div class="line">   // Parsing it&apos;s method</div><div class="line"></div><div class="line">   // This is really fun</div><div class="line">   // Even if we load two instances of classes with the same name :)</div><div class="line">   // NSClassFromString Will return FIRST(Original) Instance. And this is cool!</div><div class="line">   NSString * className = [NSString stringWithFormat:@&quot;%s&quot;, class_getName(injectedClass)];</div><div class="line">   Class originalClass = NSClassFromString(className);</div><div class="line"></div><div class="line">   // Replacing instance methods</div><div class="line">   [self replaceMethodsOfClass:originalClass withMethodsOfClass:injectedClass];</div><div class="line"></div><div class="line">   // Additionally we need to update Class methods (not instance methods) implementations</div><div class="line">   [self replaceMethodsOfClass:object_getClass(originalClass) withMethodsOfClass:object_getClass(injectedClass)];</div><div class="line"></div><div class="line">   // Notifying about new classes logic</div><div class="line">    NSLog(@&quot;Class (%@) and their subclasses instances would be notified with&quot;, NSStringFromClass(originalClass));</div><div class="line">    NSLog(@&quot; - (void)updateOnClassInjection &quot;);</div><div class="line"></div><div class="line">    [[SFInjectionsNotificationsCenter sharedInstance] notifyOnClassInjection:originalClass];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (void)replaceMethodsOfClass:(Class)originalClass withMethodsOfClass:(Class)injectedClass &#123;</div><div class="line">   if (originalClass != injectedClass) &#123;</div><div class="line"></div><div class="line">      NSLog(@&quot;Injecting %@ class : %@&quot;, class_isMetaClass(injectedClass) ? @&quot;meta&quot; : @&quot;&quot;, NSStringFromClass(injectedClass));</div><div class="line"></div><div class="line">      // Original class methods</div><div class="line"></div><div class="line">      int i = 0;</div><div class="line">      unsigned int mc = 0;</div><div class="line"></div><div class="line">      Method * injectedMethodsList = class_copyMethodList(injectedClass, &amp;mc);</div><div class="line">      for (i = 0; i &lt; mc; i++) &#123;</div><div class="line"></div><div class="line">         Method m = injectedMethodsList[i];</div><div class="line">         SEL selector = method_getName(m);</div><div class="line">         const char * types = method_getTypeEncoding(m);</div><div class="line">         IMP injectedImplementation = method_getImplementation(m);</div><div class="line"></div><div class="line">         //  Replacing old implementation with new one</div><div class="line">         class_replaceMethod(originalClass, selector, injectedImplementation, types);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h5 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h5><ul>
<li>shell、python脚本编程</li>
<li>iOS 开发</li>
<li>xcode 插件开发</li>
</ul>
<h5 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h5><ul>
<li>xcode compile and link </li>
<li>clang</li>
<li>dylib和dlopen</li>
<li>oc runtime</li>
<li>在模拟器里监听系统目录变化</li>
<li>oc中调python：NSTask</li>
<li>python中调shell脚本：POpen</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DYCI工具分析&quot;&gt;&lt;a href=&quot;#DYCI工具分析&quot; class=&quot;headerlink&quot; title=&quot;DYCI工具分析&quot;&gt;&lt;/a&gt;DYCI工具分析&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;DYCI由三部分功能模块组成，脚本+plugin+framework。&lt;br&gt;&lt;i
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>函数式和响应式编程</title>
    <link href="http://yoursite.com/2016/08/21/fpandrp/"/>
    <id>http://yoursite.com/2016/08/21/fpandrp/</id>
    <published>2016-08-21T13:24:06.000Z</published>
    <updated>2016-08-21T13:25:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数式编程-FP-介绍"><a href="#函数式编程-FP-介绍" class="headerlink" title="函数式编程(FP)介绍"></a>函数式编程(FP)介绍</h2><p>函数式编程是一种编程范式。什么是编程范式呢？范式就是模式、方法，是一种典型的编程风格。常见的编程范式有：面向过程，面向对象，函数式。</p>
<ul>
<li>面向过程：又称做命令式编程。认为程序就是一系列的步骤和过程组装起来的。基本单元是变量，语句，函数调用。</li>
<li>面向对象：将对象作为程序的基本单元。通过对象的组合、对象之间通信来开发程序。</li>
<li>函数式：把程序当作数学函数的运算过程，避免改变状态和可变数据。</li>
</ul>
<p>多范式编程，面向对象中方法也是面向过程的。函数式中也有过程。</p>
<h3 id="程序的状态"><a href="#程序的状态" class="headerlink" title="程序的状态"></a>程序的状态</h3><p>程序的状态：定义的全局变量和局部变量，还包括当前打开的文件，网络连接，申请的内存。</p>
<ul>
<li><p>命令式编程是通过改变变量的值来保存当前程序的状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sum = 0 </div><div class="line">for i in range(1,11): </div><div class="line">	sum += i</div></pre></td></tr></table></figure>
</li>
<li><p>函数式编程通过函数的参数或者返回值来保存程序的状态。函数一层层的叠加起来，其中每个函数的参数或返回结果来代表了程序的一个中间状态，过程式编程中对变量的修改在这里变成了一次的函数转换（一层的函数叠加）。<br>因为不能修改变量的值，纯函数式编程非常依赖递归。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (addup n) </div><div class="line">	(if (= n 1) </div><div class="line">		1 </div><div class="line">	(+ n (addup (- n 1)))) </div><div class="line"></div><div class="line">(addup 10)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (addup2 n sum)</div><div class="line">  (if (= n 1)</div><div class="line">    (+ sum 1)</div><div class="line">  (addup2 (- n 1) (+ n sum))))</div><div class="line"></div><div class="line">(addup2 10 0)</div></pre></td></tr></table></figure>
<h3 id="函数式语言的两个本质特征"><a href="#函数式语言的两个本质特征" class="headerlink" title="函数式语言的两个本质特征"></a>函数式语言的两个本质特征</h3><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Functions that operate on other functions (accept them as arguments or return value) are called higher order functions.</div></pre></td></tr></table></figure>
<p>Python就具有高阶函数的性质，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def twice(function, x):</div><div class="line">    return function(function(x))</div><div class="line"></div><div class="line">def f(x):</div><div class="line">    return x + 3</div><div class="line"></div><div class="line">print(twice(f, 7)) # 13</div></pre></td></tr></table></figure></p>
<p>比如一个常见的函数map，就是一个更高层更抽象的函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">l = [1,2,3]</div><div class="line">map(lambda x: 2*x, l) # =&gt; [2, 4, 6]</div></pre></td></tr></table></figure></p>
<p>具有高阶函数性质的编程语言往往也会支持一等函数（First-class function），它是高阶函数概念上的超集。 指的是函数和其它数据类型处于平等地位，不搞特殊，可以把函数赋值给其他变量，也可以作为参数传入另一个函数，或者作为别的函数的返回值。</p>
<p>####无副作用<br>函数式编程从它的源头<a href="http://en.wikipedia.org/wiki/Lambda_calculus" target="_blank" rel="external">λ演算</a>开始，就是强调函数计算的纯粹性，每个函数的执行都是没有副作用（no side effect）的——函数所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。 典型的长于计算，弱于I/O。<br>缺点：浪费空间。<br>优点：<strong>它使得函数式编程各个独立的部分的执行顺序可以随意打乱</strong>。 而这在命令式编程风格的代码中是不可能的。<br>执行顺序的自由使其得以衍生出一大堆非常有用的特性，比如无锁（lock-free）的并发操作、惰性求值（lazy evaluation），还有在编译器级别上的各种性能优化技术。 特别在并行技术上，Clojure, Haskell, F#, Scala, Erlang这些函数式语言都无一例外地支持强大的并发功能。<br>当然函数式语言不可能真的就不执行I/O，但它通过一些手段来把I/O的影响限制到最小，比如通过Continuations, Monad等技术。</p>
<h3 id="其他特征"><a href="#其他特征" class="headerlink" title="其他特征"></a>其他特征</h3><h4 id="尾递归（Tail-Recursion）"><a href="#尾递归（Tail-Recursion）" class="headerlink" title="尾递归（Tail Recursion）"></a>尾递归（Tail Recursion）</h4><p>由于递归在函数式编程中被大量使用，如果任其发展，函数栈很快将爆炸。<br>JVM不支持尾递归。</p>
<h4 id="Persistent-data-structure"><a href="#Persistent-data-structure" class="headerlink" title="Persistent data structure"></a>Persistent data structure</h4><p>又叫做effectively immutable data structure。</p>
<h2 id="响应式编程-RP-介绍"><a href="#响应式编程-RP-介绍" class="headerlink" title="响应式编程(RP)介绍"></a>响应式编程(RP)介绍</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数式编程-FP-介绍&quot;&gt;&lt;a href=&quot;#函数式编程-FP-介绍&quot; class=&quot;headerlink&quot; title=&quot;函数式编程(FP)介绍&quot;&gt;&lt;/a&gt;函数式编程(FP)介绍&lt;/h2&gt;&lt;p&gt;函数式编程是一种编程范式。什么是编程范式呢？范式就是模式、方法，是一
    
    </summary>
    
    
  </entry>
  
</feed>
