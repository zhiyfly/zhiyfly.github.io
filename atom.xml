<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-21T13:25:35.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>函数式和响应式编程</title>
    <link href="http://yoursite.com/2016/08/21/fpandrp/"/>
    <id>http://yoursite.com/2016/08/21/fpandrp/</id>
    <published>2016-08-21T13:24:06.000Z</published>
    <updated>2016-08-21T13:25:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数式编程-FP-介绍"><a href="#函数式编程-FP-介绍" class="headerlink" title="函数式编程(FP)介绍"></a>函数式编程(FP)介绍</h2><p>函数式编程是一种编程范式。什么是编程范式呢？范式就是模式、方法，是一种典型的编程风格。常见的编程范式有：面向过程，面向对象，函数式。</p>
<ul>
<li>面向过程：又称做命令式编程。认为程序就是一系列的步骤和过程组装起来的。基本单元是变量，语句，函数调用。</li>
<li>面向对象：将对象作为程序的基本单元。通过对象的组合、对象之间通信来开发程序。</li>
<li>函数式：把程序当作数学函数的运算过程，避免改变状态和可变数据。</li>
</ul>
<p>多范式编程，面向对象中方法也是面向过程的。函数式中也有过程。</p>
<h3 id="程序的状态"><a href="#程序的状态" class="headerlink" title="程序的状态"></a>程序的状态</h3><p>程序的状态：定义的全局变量和局部变量，还包括当前打开的文件，网络连接，申请的内存。</p>
<ul>
<li><p>命令式编程是通过改变变量的值来保存当前程序的状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sum = 0 </div><div class="line">for i in range(1,11): </div><div class="line">	sum += i</div></pre></td></tr></table></figure>
</li>
<li><p>函数式编程通过函数的参数或者返回值来保存程序的状态。函数一层层的叠加起来，其中每个函数的参数或返回结果来代表了程序的一个中间状态，过程式编程中对变量的修改在这里变成了一次的函数转换（一层的函数叠加）。<br>因为不能修改变量的值，纯函数式编程非常依赖递归。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (addup n) </div><div class="line">	(if (= n 1) </div><div class="line">		1 </div><div class="line">	(+ n (addup (- n 1)))) </div><div class="line"></div><div class="line">(addup 10)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (addup2 n sum)</div><div class="line">  (if (= n 1)</div><div class="line">    (+ sum 1)</div><div class="line">  (addup2 (- n 1) (+ n sum))))</div><div class="line"></div><div class="line">(addup2 10 0)</div></pre></td></tr></table></figure>
<h3 id="函数式语言的两个本质特征"><a href="#函数式语言的两个本质特征" class="headerlink" title="函数式语言的两个本质特征"></a>函数式语言的两个本质特征</h3><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Functions that operate on other functions (accept them as arguments or return value) are called higher order functions.</div></pre></td></tr></table></figure>
<p>Python就具有高阶函数的性质，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def twice(function, x):</div><div class="line">    return function(function(x))</div><div class="line"></div><div class="line">def f(x):</div><div class="line">    return x + 3</div><div class="line"></div><div class="line">print(twice(f, 7)) # 13</div></pre></td></tr></table></figure></p>
<p>比如一个常见的函数map，就是一个更高层更抽象的函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">l = [1,2,3]</div><div class="line">map(lambda x: 2*x, l) # =&gt; [2, 4, 6]</div></pre></td></tr></table></figure></p>
<p>具有高阶函数性质的编程语言往往也会支持一等函数（First-class function），它是高阶函数概念上的超集。 指的是函数和其它数据类型处于平等地位，不搞特殊，可以把函数赋值给其他变量，也可以作为参数传入另一个函数，或者作为别的函数的返回值。</p>
<p>####无副作用<br>函数式编程从它的源头<a href="http://en.wikipedia.org/wiki/Lambda_calculus" target="_blank" rel="external">λ演算</a>开始，就是强调函数计算的纯粹性，每个函数的执行都是没有副作用（no side effect）的——函数所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。 典型的长于计算，弱于I/O。<br>缺点：浪费空间。<br>优点：<strong>它使得函数式编程各个独立的部分的执行顺序可以随意打乱</strong>。 而这在命令式编程风格的代码中是不可能的。<br>执行顺序的自由使其得以衍生出一大堆非常有用的特性，比如无锁（lock-free）的并发操作、惰性求值（lazy evaluation），还有在编译器级别上的各种性能优化技术。 特别在并行技术上，Clojure, Haskell, F#, Scala, Erlang这些函数式语言都无一例外地支持强大的并发功能。<br>当然函数式语言不可能真的就不执行I/O，但它通过一些手段来把I/O的影响限制到最小，比如通过Continuations, Monad等技术。</p>
<h3 id="其他特征"><a href="#其他特征" class="headerlink" title="其他特征"></a>其他特征</h3><h4 id="尾递归（Tail-Recursion）"><a href="#尾递归（Tail-Recursion）" class="headerlink" title="尾递归（Tail Recursion）"></a>尾递归（Tail Recursion）</h4><p>由于递归在函数式编程中被大量使用，如果任其发展，函数栈很快将爆炸。<br>JVM不支持尾递归。</p>
<h4 id="Persistent-data-structure"><a href="#Persistent-data-structure" class="headerlink" title="Persistent data structure"></a>Persistent data structure</h4><p>又叫做effectively immutable data structure。</p>
<h2 id="响应式编程-RP-介绍"><a href="#响应式编程-RP-介绍" class="headerlink" title="响应式编程(RP)介绍"></a>响应式编程(RP)介绍</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数式编程-FP-介绍&quot;&gt;&lt;a href=&quot;#函数式编程-FP-介绍&quot; class=&quot;headerlink&quot; title=&quot;函数式编程(FP)介绍&quot;&gt;&lt;/a&gt;函数式编程(FP)介绍&lt;/h2&gt;&lt;p&gt;函数式编程是一种编程范式。什么是编程范式呢？范式就是模式、方法，是一
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/08/21/hello-world/"/>
    <id>http://yoursite.com/2016/08/21/hello-world/</id>
    <published>2016-08-21T13:03:51.000Z</published>
    <updated>2016-08-21T13:03:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
